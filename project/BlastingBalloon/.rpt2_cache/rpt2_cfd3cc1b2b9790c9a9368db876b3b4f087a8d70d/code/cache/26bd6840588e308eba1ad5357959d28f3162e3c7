{
  "code": "import { Enum } from \"../Template/Enum\";\r\nimport { Clicks } from \"../Template/Clicks\";\r\nimport { Animation } from \"../Template/Animation\";\r\nexport default class GameControl extends Laya.Script {\r\n    constructor() {\r\n        super();\r\n    }\r\n    onEnable() {\r\n        this.self = this.owner;\r\n        this.self['GameControl'] = this;\r\n        this.noStart();\r\n        this.createStartGame();\r\n        this.adaptive();\r\n    }\r\n    adaptive() {\r\n        let stageH = Laya.stage.height;\r\n        this.self.height = stageH;\r\n        this.Background.height = stageH;\r\n        this.Tip.y = stageH * 0.171;\r\n        this.BalloonVessel.y = stageH * 0.266;\r\n        this.BalloonVessel.height = stageH * 0.697;\r\n        let parentBoard = this.BalloonVessel.getChildByName('parentBoard');\r\n        parentBoard.height = stageH * 0.697;\r\n        this.BalloonParent.height = parentBoard.height - 100;\r\n        this.Grass.y = stageH;\r\n    }\r\n    levelsNodeAdaptive() {\r\n        let guan = this.LevelsNode.getChildByName('guan');\r\n        console.log(Number(this.Levels.value));\r\n        if (Number(this.Levels.value) >= 10) {\r\n            console.log(Number(this.Levels.value));\r\n            guan.x = 72;\r\n        }\r\n        else {\r\n            guan.x = 64;\r\n        }\r\n    }\r\n    noStart() {\r\n        this.Tip.alpha = 0;\r\n        this.BalloonVessel.alpha = 0;\r\n    }\r\n    start() {\r\n        this.Tip.alpha = 1;\r\n        this.BalloonVessel.alpha = 1;\r\n        this.time.value = 1;\r\n        this.Levels.value = (Number(this.Levels.value) + 1).toString();\r\n        this.levelsNodeAdaptive();\r\n        this.row = 3;\r\n        this.line = 4;\r\n        this.spacing = 5;\r\n        this.colorCategory = 3;\r\n        this.openingAnimation();\r\n    }\r\n    createStartGame() {\r\n        let startGame = Laya.Pool.getItemByCreateFun('startGame', this.startGame.create, this.startGame);\r\n        this.self.addChild(startGame);\r\n    }\r\n    openingAnimation() {\r\n        let scale1 = 1.05;\r\n        let time1 = 300;\r\n        let time2 = 100;\r\n        let delayed = 250;\r\n        let parentBoard = this.BalloonVessel.getChildByName('parentBoard');\r\n        Animation.bombs_Appear(parentBoard, 0, 1, scale1, 0, time1, time2, delayed * 1, f => {\r\n            this.createBalloonCollection();\r\n        });\r\n        let scale2 = 1.2;\r\n        let tipboard = this.Tip.getChildByName('tipboard');\r\n        Animation.bombs_Appear(tipboard, 0, 1, scale2, 0, time1, time2, delayed * 2, null);\r\n        Animation.bombs_Appear(this.TimeNode, 0, 1, scale2, 0, time1, time2, delayed * 3, null);\r\n        Animation.bombs_Appear(this.PropsNode, 0, 1, scale2, 0, time1, time2, delayed * 4, null);\r\n        Animation.bombs_Appear(this.LevelsNode, 0, 1, scale2, 0, time1, time2, delayed * 5, null);\r\n        this.taskTipShake(delayed * 6);\r\n    }\r\n    taskTipShake(delayed) {\r\n        let time = 200;\r\n        let scaleX3 = 0.85;\r\n        let scaleY3 = 1.15;\r\n        let plug_01 = this.Tip.getChildByName('plug_01');\r\n        Animation.deform_Move(plug_01, 1550, 555, scaleX3, scaleY3, time, delayed, null);\r\n        let plug_02 = this.Tip.getChildByName('plug_02');\r\n        Animation.deform_Move(plug_02, -800, 171, scaleX3, scaleY3, time, delayed, fun => {\r\n            Animation.leftRight_Shake(this.Tip, 60, 15, 100, null);\r\n            Animation.leftRight_Shake(this.PropsNode, 60, 15, 160, null);\r\n            Animation.leftRight_Shake(this.LevelsNode, 60, 15, 160, null);\r\n        });\r\n    }\r\n    leaveAnimation() {\r\n        let scale1 = 1.05;\r\n        let time1 = 300;\r\n        let delayed = 250;\r\n        let parentBoard = this.BalloonVessel.getChildByName('parentBoard');\r\n        Animation.bombs_Vanish(parentBoard, 0, 0, 0, time1, delayed * 1, f => {\r\n        });\r\n        let scale2 = 1.2;\r\n        let tipboard = this.Tip.getChildByName('tipboard');\r\n        Animation.bombs_Vanish(tipboard, 0, 0, 0, time1, delayed * 2, null);\r\n        Animation.bombs_Vanish(this.TimeNode, 0, 0, 0, time1, delayed * 2, null);\r\n        Animation.bombs_Vanish(this.PropsNode, 0, 0, 0, time1, delayed * 2, null);\r\n        Animation.bombs_Vanish(this.LevelsNode, 0, 0, 0, time1, delayed * 2, null);\r\n        let time2 = 800;\r\n        let scaleX3 = 0.85;\r\n        let scaleY3 = 1.15;\r\n        let plug_01 = this.Tip.getChildByName('plug_01');\r\n        let firstX_01 = plug_01.x;\r\n        Animation.deform_Move(plug_01, firstX_01, 1550, scaleX3, scaleY3, time2, delayed * 3, null);\r\n        let plug_02 = this.Tip.getChildByName('plug_02');\r\n        let firstX_02 = plug_02.x;\r\n        Animation.deform_Move(plug_02, firstX_02, -800, scaleX3, scaleY3, time2, delayed * 3, null);\r\n        this.createStartGame();\r\n        this.clearAllBallon('startGame');\r\n    }\r\n    createBalloonCollection() {\r\n        let widthP = this.BalloonParent.width;\r\n        let heightP = this.BalloonParent.height;\r\n        let delayed = 0;\r\n        for (let i = 0; i < this.row; i++) {\r\n            for (let j = 0; j < this.line; j++) {\r\n                delayed += 100;\r\n                let x = widthP / this.row * (i + 1) - widthP / (this.row * 2);\r\n                let y = heightP / this.line * (j + 1) - heightP / (this.line * 2);\r\n                let balloon = this.createBallon(x, y);\r\n                let scale = (widthP / this.row - this.spacing * 2) / balloon.width;\r\n                balloon.scale(scale, scale);\r\n                Clicks.balloonScale = scale;\r\n                Animation.bombs_Appear(balloon, 0, scale, scale + 0.1, 0, 200, 100, delayed, f => {\r\n                    if (i === this.row - 1 && j === this.line - 1) {\r\n                        this.TaskBalloonParentSet();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    moveToNextLevel() {\r\n        let scale1 = 1.05;\r\n        let time1 = 300;\r\n        let time2 = 100;\r\n        let delayed = 250;\r\n        Animation.bombs_Vanish(this.LevelsNode, 0, 0, 0, 100, delayed, f => {\r\n            this.Levels.value = (Number(this.Levels.value) + 1).toString();\r\n            Animation.bombs_Appear(this.LevelsNode, 0, 1, 1.1, 0, time1, time2, delayed, f => {\r\n            });\r\n        });\r\n        Animation.bombs_Vanish(this.TimeNode, 0, 0, 0, time1, delayed * 2, f => {\r\n            this.time.value = 1;\r\n            Animation.bombs_Appear(this.TimeNode, 0, 1, 1.1, 0, time1, time2, delayed, f => {\r\n                this.taskTipShake(0);\r\n            });\r\n        });\r\n        this.clearAllBallon('restartAndNextLevel');\r\n    }\r\n    againCurrentlevel() {\r\n        let scale1 = 1.05;\r\n        let time1 = 200;\r\n        let time2 = 100;\r\n        let delayed = 250;\r\n        Animation.swell_shrink(this.LevelsNode, 1, 1.3, time1 * 0.5, 0, f => {\r\n            Animation.swell_shrink(this.LevelsNode, 1, 1.3, time1 * 0.5, 0, f => {\r\n            });\r\n        });\r\n        Animation.bombs_Vanish(this.TimeNode, 0, 0, 0, time1, delayed * 2, f => {\r\n            this.time.value = 1;\r\n            Animation.bombs_Appear(this.TimeNode, 0, 1, 1.1, 0, time1, time2, delayed * 5, f => {\r\n                this.taskTipShake(0);\r\n            });\r\n        });\r\n        this.clearAllBallon('restartAndNextLevel');\r\n    }\r\n    clearAllBallon(type) {\r\n        let delayed = 0;\r\n        let len = this.BalloonParent._children.length;\r\n        if (len === 0) {\r\n            this.clearAllTaskBallon(type);\r\n            return;\r\n        }\r\n        for (let index = 0; index < len; index++) {\r\n            const element = this.BalloonParent._children[index];\r\n            Animation.bombs_Vanish(element, 0, 0, 0, 100, delayed, f => {\r\n                if (index === len - 1) {\r\n                    this.clearAllTaskBallon(type);\r\n                    this.BalloonParent.removeChildren(0, len - 1);\r\n                }\r\n            });\r\n            delayed += 80;\r\n        }\r\n    }\r\n    clearAllTaskBallon(type) {\r\n        let delayed = 0;\r\n        let len = this.TaskBalloonParent._children.length;\r\n        for (let index = 0; index < len; index++) {\r\n            const element = this.TaskBalloonParent._children[index];\r\n            Animation.bombs_Vanish(element, 0, 0, 0, 150, delayed, f => {\r\n                element.removeSelf();\r\n                if (index === len - 1) {\r\n                    if (type === 'restartAndNextLevel') {\r\n                        this.createBalloonCollection();\r\n                    }\r\n                    else if (type === 'startGame') {\r\n                        console.log('类型是返回主界面的清除');\r\n                    }\r\n                }\r\n            });\r\n            delayed += 100;\r\n        }\r\n    }\r\n    createBallon(x, y) {\r\n        let balloon = Laya.Pool.getItemByCreateFun('balloon', this.balloon.create, this.balloon);\r\n        this.BalloonParent.addChild(balloon);\r\n        balloon.pos(x, y);\r\n        let img = balloon['Balloon'].img;\r\n        let random = Math.floor(Math.random() * this.colorCategory);\r\n        img.skin = Enum.ColorSkin[random];\r\n        balloon.name = Enum.ColorName[random];\r\n        return balloon;\r\n    }\r\n    TaskBalloonParentSet() {\r\n        let arr1 = [];\r\n        for (let i = 0; i < this.BalloonParent._children.length; i++) {\r\n            const balloon = this.BalloonParent._children[i];\r\n            arr1.push(balloon.name);\r\n        }\r\n        let arr2 = Array.from(new Set(arr1));\r\n        let len = arr2.length;\r\n        let widthP = len * 75;\r\n        this.TaskBalloonParent.width = widthP;\r\n        let heightP = this.TaskBalloonParent.height;\r\n        let delayed;\r\n        for (let j = 0; j < len; j++) {\r\n            delayed = 50 * j;\r\n            let name = arr2[j];\r\n            let x = widthP / len * (j + 1) - widthP / (len * 2);\r\n            let y = heightP / 2;\r\n            let colorSkin = Enum.IconSkin_01[Enum.ColorName[name]];\r\n            let ballon_Icon = this.createBallon_Icon(x, y, colorSkin);\r\n            Animation.bombs_Appear(ballon_Icon, 0, 1, 1.1, 0, 200, 200, delayed, f => {\r\n                if (j === len - 1) {\r\n                    this.balloonCount();\r\n                    this.balloonClickOrder();\r\n                    this.clicksAllOn();\r\n                    this.startSwicth = true;\r\n                }\r\n            });\r\n        }\r\n        this.TaskBalloonParent.pivotX = this.TaskBalloonParent.width / 2;\r\n        this.TaskBalloonParent.x = 375;\r\n    }\r\n    balloonClickOrder() {\r\n        for (let i = 0; i < this.TaskBalloonParent._children.length; i++) {\r\n            const taskBallon = this.TaskBalloonParent._children[i];\r\n            const name = taskBallon.name;\r\n            let img = taskBallon['Balloon_Icon'].img;\r\n            if (name === this.clickOrderArr[0]) {\r\n                Animation.swell_shrink(taskBallon, 1.1, 1.3, 25, 0, f => {\r\n                });\r\n                img.skin = Enum.IconSkin_02[Enum.ColorName[name]];\r\n            }\r\n            else {\r\n                taskBallon.scale(1, 1);\r\n                img.skin = Enum.IconSkin_01[Enum.ColorName[name]];\r\n            }\r\n        }\r\n    }\r\n    balloonCount() {\r\n        this.clickOrderArr = [];\r\n        for (let j = 0; j < this.TaskBalloonParent._children.length; j++) {\r\n            let taskBallon = this.TaskBalloonParent._children[j];\r\n            let taskName = taskBallon.name;\r\n            for (let i = 0; i < this.BalloonParent._children.length; i++) {\r\n                let balloon = this.BalloonParent._children[i];\r\n                let name = balloon.name;\r\n                if (taskName === name) {\r\n                    let num = taskBallon['Balloon_Icon'].num;\r\n                    this.start();\r\n                    this.clickOrderArr.push(name);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    createBallon_Icon(x, y, colorSkin) {\r\n        let balloon_icon = Laya.Pool.getItemByCreateFun('balloon_icon', this.balloon_icon.create, this.balloon_icon);\r\n        this.TaskBalloonParent.addChild(balloon_icon);\r\n        balloon_icon.pos(x, y);\r\n        let img = balloon_icon['Balloon_Icon'].img;\r\n        img.skin = colorSkin;\r\n        balloon_icon.name = Enum.ColorName[Enum.IconSkin_01[colorSkin]];\r\n        return balloon_icon;\r\n    }\r\n    clicksAllOn() {\r\n        for (let index = 0; index < this.BalloonParent._children.length; index++) {\r\n            const element = this.BalloonParent._children[index];\r\n            element['Balloon'].balloonClicksOn();\r\n            console.log('开启所有气球的点击事件');\r\n        }\r\n    }\r\n    clicksAllOff() {\r\n        for (let index = 0; index < this.BalloonParent._children.length; index++) {\r\n            const element = this.BalloonParent._children[index];\r\n            element['Balloon'].balloonClicksOff();\r\n        }\r\n    }\r\n    createGameOver(type) {\r\n        let gameOver = Laya.Pool.getItemByCreateFun('gameOver', this.gameOver.create, this.gameOver);\r\n        this.self.addChild(gameOver);\r\n        gameOver['GameOver'].gameOverType(type);\r\n        this.clicksAllOff();\r\n        this.startSwicth = false;\r\n    }\r\n    onUpdate() {\r\n        if (this.startSwicth) {\r\n            if (this.time.value > 0) {\r\n                this.time.value -= 0.0001;\r\n            }\r\n            else if (this.time.value <= 0) {\r\n                this.createGameOver('defeated');\r\n                this.startSwicth = false;\r\n            }\r\n        }\r\n    }\r\n    onDisable() {\r\n    }\r\n}\r\n",
  "references": [
    "F:/Work/Game/03_BlastingBalloon/project/BlastingBalloon/src/Script/Template/WXDataManager.ts",
    "F:/Work/Game/03_BlastingBalloon/project/BlastingBalloon/src/Script/Template/Enum.ts",
    "F:/Work/Game/03_BlastingBalloon/project/BlastingBalloon/src/Script/Template/Clicks.ts",
    "F:/Work/Game/03_BlastingBalloon/project/BlastingBalloon/src/Script/Template/Animation.ts"
  ]
}
