{
  "code": "import { Enum } from \"../Template/Enum\";\r\nimport { Animation } from \"../Template/Animation\";\r\nexport default class Guidance extends Laya.Script {\r\n    constructor() {\r\n        super();\r\n    }\r\n    onEnable() {\r\n        console.log('我是新手引导脚本');\r\n        this.self = this.owner;\r\n        this.self['Guidance'] = this;\r\n        this.gameControl = this.self['GameControl'];\r\n        this.guideColor_Lv_01 = [[1, 0, 1], [1, 0, 0], [1, 1, 0]];\r\n        this.guideColor_Lv_02 = [[0, 1, 1, 1], [1, 0, 0, 1], [1, 1, 0, 0]];\r\n        this.cilksNum = 0;\r\n    }\r\n    guidanceInit() {\r\n        this.guideContainer = new Laya.Sprite();\r\n        this.guideContainer.cacheAs = \"bitmap\";\r\n        Laya.stage.addChild(this.guideContainer);\r\n    }\r\n    newGuidanceSet() {\r\n        this.guideContainer.removeChildren(0, this.guideContainer._children.length - 1);\r\n        var maskArea = new Laya.Sprite();\r\n        maskArea.alpha = 0.5;\r\n        maskArea.graphics.drawRect(0, 0, Laya.stage.width, Laya.stage.height, \"#000000\");\r\n        maskArea.name = 'bg';\r\n        this.guideContainer.addChild(maskArea);\r\n        Animation.fade_out(maskArea, 0, 0.5, 100, 0, null);\r\n        this.tipParent = new Laya.Sprite();\r\n        this.guideContainer.addChild(this.tipParent);\r\n        this.tipParent.pos(0, 0);\r\n        this.tipParent.zOrder = 100;\r\n    }\r\n    createBalloonGuidance(type) {\r\n        this.newGuidanceSet();\r\n        this.ballonAndTaskMask(type);\r\n        this.createTipSet(type);\r\n    }\r\n    ballonAndTaskMask(type) {\r\n        for (let index = 0; index < this.BalloonParent._children.length; index++) {\r\n            const balloon = this.BalloonParent._children[index];\r\n            if (balloon.name === type) {\r\n                let x = balloon.x + (this.BalloonParent.x - this.BalloonParent.width / 2) + (this.BalloonVessel.x - this.BalloonVessel.width / 2);\r\n                let y = (balloon.y + this.BalloonParent.y + this.BalloonVessel.y) - balloon.height * 0.05;\r\n                let radius = balloon.height / 2 - 30;\r\n                this.createCircleMask(x, y, radius);\r\n                balloon['Balloon'].balloonClicksOn();\r\n            }\r\n            else {\r\n                balloon['Balloon'].balloonClicksOff();\r\n            }\r\n            for (let index = 0; index < this.TaskBalloonParent._children.length; index++) {\r\n                const taskBalloon = this.TaskBalloonParent._children[index];\r\n                if (taskBalloon.name === type) {\r\n                    let x = taskBalloon.x + (this.TaskBalloonParent.x - this.TaskBalloonParent.width / 2) + (this.Tip.x - this.Tip.width / 2);\r\n                    let y = taskBalloon.y + (this.TaskBalloonParent.y - this.TaskBalloonParent.height / 2) + (this.Tip.y - this.Tip.height / 2);\r\n                    let radius = taskBalloon.height / 2 + 10;\r\n                    this.createCircleMask(x, y, radius);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    createBeetleGuidance() {\r\n        this.newGuidanceSet();\r\n        for (let index = 0; index < this.BeetleParent._children.length; index++) {\r\n            const beetle = this.BeetleParent._children[index];\r\n            let x = beetle.x + this.BeetleParent.x;\r\n            let y = beetle.y + this.BeetleParent.x;\r\n            let radius = beetle.height / 2 + 50;\r\n            this.createCircleMask(x, y, radius);\r\n            beetle['Beetle'].clicksOffBtn();\r\n        }\r\n        let x = this.PropsNode.x + (this.Tip.x - this.Tip.width / 2);\r\n        let y = this.PropsNode.y + (this.Tip.y - this.Tip.height / 2);\r\n        let radius = 80;\r\n        this.createCircleMask(x, y, radius);\r\n        this.PropsNode['Props'].aniSwitch = true;\r\n        this.PropsNode['Props'].clicksOnBtn();\r\n        this.createTipSet('beetle');\r\n    }\r\n    createTimeGuidance() {\r\n        this.newGuidanceSet();\r\n        let width = 450;\r\n        let height = 80;\r\n        let x = this.TimeNode.x - width / 2;\r\n        let y = this.TimeNode.y + (this.Tip.y - this.Tip.height / 2) - height / 2;\r\n        this.createRectleMask(x, y, width, height);\r\n        this.createTipSet('time');\r\n        let currentColor = this.gameControl.clickOrderArr[0];\r\n        this.ballonAndTaskMask(currentColor);\r\n        this.PropsNode['Props'].aniSwitch = false;\r\n    }\r\n    createTipSet(type) {\r\n        if (type === Enum.BalloonName[1]) {\r\n            for (let index = 0; index < 2; index++) {\r\n                let skin;\r\n                let x;\r\n                let y;\r\n                let delay;\r\n                if (index === 0) {\r\n                    skin = Enum.GuidanceTiptype.colorOrder;\r\n                    x = 110;\r\n                    y = Laya.stage.height * 0.028;\r\n                    delay = 100;\r\n                }\r\n                else {\r\n                    skin = Enum.GuidanceTiptype.color_01;\r\n                    x = 387;\r\n                    y = Laya.stage.height * 0.142;\r\n                    delay = 200;\r\n                }\r\n                this.tip(skin, x, y, delay);\r\n            }\r\n        }\r\n        else if (type === Enum.BalloonName[0]) {\r\n            this.tip(Enum.GuidanceTiptype.color_02, 550, Laya.stage.height * 0.45, 100);\r\n        }\r\n        else if (type === 'beetle') {\r\n            let x = this.PropsNode.x + (this.Tip.x - this.Tip.width / 2);\r\n            let y = this.PropsNode.y + (this.Tip.y - this.Tip.height / 2);\r\n            this.tip(Enum.GuidanceTiptype.expelBeetle, x - 200, y - 100, 100);\r\n        }\r\n        else if (type === 'time') {\r\n            this.tip(Enum.GuidanceTiptype.time, 509, 118, 100);\r\n        }\r\n    }\r\n    tip(skin, x, y, delay) {\r\n        let tip = new Laya.Image();\r\n        tip.skin = skin;\r\n        this.tipParent.addChild(tip);\r\n        tip.x = x;\r\n        tip.y = y;\r\n        tip.pivotX = tip.width / 2;\r\n        tip.pivotY = tip.height / 2;\r\n        Animation.bombs_Appear(tip, 0, 1, 1.1, 0, 150, 50, delay, null, null);\r\n    }\r\n    createCircleMask(x, y, radius) {\r\n        this.interactionArea = new Laya.Sprite();\r\n        this.interactionArea.name = 'reverseMask';\r\n        this.interactionArea.blendMode = \"destination-out\";\r\n        this.guideContainer.addChild(this.interactionArea);\r\n        this.interactionArea.graphics.drawCircle(x, y, radius, \"#000000\");\r\n    }\r\n    createRectleMask(x, y, width, height) {\r\n        this.interactionArea = new Laya.Sprite();\r\n        this.interactionArea.name = 'reverseMask';\r\n        this.interactionArea.blendMode = \"destination-out\";\r\n        this.guideContainer.addChild(this.interactionArea);\r\n        this.interactionArea.graphics.drawRect(x, y, width, height, \"#000000\");\r\n    }\r\n    onDisable() {\r\n    }\r\n}\r\n",
  "references": [
    "F:/Work/Game/03_BlastingBalloon/project/BlastingBalloon/src/Script/Template/Clicks.ts",
    "F:/Work/Game/03_BlastingBalloon/project/BlastingBalloon/src/Script/Project/Background.ts",
    "F:/Work/Game/03_BlastingBalloon/project/BlastingBalloon/src/Script/Template/Enum.ts",
    "F:/Work/Game/03_BlastingBalloon/project/BlastingBalloon/src/Script/Template/Animation.ts"
  ]
}
